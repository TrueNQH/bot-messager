<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Chat Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background-color: #f8f9fa;
    }
    .chat-sidebar {
      width: 280px;
      background-color: #2f855a;
      color: white;
      height: 100vh;
      overflow-y: auto;
    }
    .chat-sidebar .contact {
      padding: 10px;
      border-bottom: 1px solid #4fd1c5;
      cursor: pointer;
    }
    .chat-sidebar .contact:hover {
      background-color: #38a169;
    }
    .chat-main {
      flex: 1;
      background-color: white;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    .chat-header, .chat-footer {
      padding: 15px;
      border-bottom: 1px solid #dee2e6;
    }
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }
    .message {
      margin-bottom: 15px;
    }
    .message .from-admin {
      background-color: #38a169;
      color: white;
      padding: 8px 12px;
      border-radius: 12px;
      max-width: 60%;
      align-self: flex-end;
    }
    .message .from-user {
      background-color: #e2e8f0;
      padding: 8px 12px;
      border-radius: 12px;
      max-width: 60%;
      align-self: flex-start;
    }
    .chat-footer input {
      width: 80%;
    }
    .chat-info {
        width: 280px;
        background-color: #f1f5f9;
        height: 100vh;
        overflow-y: auto;
        border-left: 1px solid #ccc;
}
  </style>
</head>
<body>
  <div class="d-flex">
    <!-- Sidebar -->
    <div class="chat-sidebar">
      <h5 class="p-3">Messages</h5>
      <div id="contact-list">
        <!-- Contacts rendered here -->
      </div>
    </div>

    <!-- Main chat area -->
    <div class="chat-main">
      <div class="chat-header d-flex justify-content-between align-items-center">
        <h6 id="chat-title">Select a user</h6>
      </div>
      <div class="chat-messages d-flex flex-column" id="chat-box">
        <!-- Messages go here -->
      </div>
      <div class="chat-footer d-flex align-items-center">
        <input type="text" class="form-control me-2" id="message-input" placeholder="Type a message...">
        <button class="btn btn-success" onclick="sendMessage()"><i class="bi bi-send"></i></button>
      </div>
    </div>
    <!-- Bên phải: thông tin người dùng -->
<div class="chat-info bg-light p-3" style="width: 260px;">
  <h6>User Info</h6>
  <div id="user-info">
    <p>Chọn một người dùng</p>
  </div>
</div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
  const socket = io();
  let selectedUserId = null;
  let currentRole = 'bot'; // hoặc 'bot'

  const contacts = {}; // {userId: { name, messages: [], info }}

  // Tạo nút chuyển chế độ
  const toggleBtn = document.createElement('button');
  toggleBtn.className = 'btn btn-outline-secondary btn-sm';
  toggleBtn.innerText = 'Mode: Bot';
  toggleBtn.onclick = () => {
    currentRole = currentRole === 'admin' ? 'bot' : 'admin';
    toggleBtn.innerText = `Mode: ${currentRole.charAt(0).toUpperCase() + currentRole.slice(1)}`;
  };
  window.addEventListener('load', () => {
    document.querySelector('.chat-header').appendChild(toggleBtn);
  });

  socket.on('user-message', async ({ senderId, message, userInfo }) => {
    if (!contacts[senderId]) {
      contacts[senderId] = {
        name: `${userInfo.first_name} ${userInfo.last_name}`,
        avatar: userInfo.profile_pic,
        messages: [],
        info: userInfo
      };
      addContactToSidebar(senderId);
    }

    contacts[senderId].messages.push({ from: 'user', text: message });

    if (selectedUserId === senderId) {
      renderMessages(senderId);
      renderUserInfo(userInfo);
    }

    // ✅ Nếu đang ở bot mode → gửi request đến API
    if (currentRole === 'bot') {
        socket.emit('send-typing', { senderId });
      const response = await fetch('https://3956-2402-800-6205-55eb-6c82-7adf-9882-abc4.ngrok-free.app/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query: message })
      });
      const data = await response.json();
      const botReply = data.response;

      // Hiển thị bot trả lời
      contacts[senderId].messages.push({ from: 'admin', text: botReply });
      if (selectedUserId === senderId) renderMessages(senderId);
      saveToGoogleSheet(senderId, userInfo, message, botReply);
      // Gửi lại tin nhắn bot qua socket để backend gửi đến user
      socket.emit('admin-reply', { senderId, message: botReply });
    }
  });

  
  function addContactToSidebar(userId) {
    const el = document.createElement('div');
    el.className = 'contact';
    el.innerHTML = `
      <img src="${contacts[userId].avatar}" width="24" height="24" class="rounded-circle me-2">
      ${contacts[userId].name}
    `;
    el.onclick = () => {
      selectedUserId = userId;
      document.getElementById('chat-title').textContent = contacts[userId].name;
      renderMessages(userId);
      renderUserInfo(contacts[userId].info);
    };
    document.getElementById('contact-list').appendChild(el);
  }

  function renderMessages(userId) {
    const box = document.getElementById('chat-box');
    box.innerHTML = '';
    contacts[userId].messages.forEach(msg => {
      const msgEl = document.createElement('div');
      msgEl.className = 'message d-flex';
      msgEl.innerHTML = `<div class="${msg.from === 'admin' ? 'from-admin ms-auto' : 'from-user'}">${msg.text}</div>`;
      box.appendChild(msgEl);
    });
    box.scrollTop = box.scrollHeight;
  }

  function renderUserInfo(user) {
  const info = document.getElementById('user-info');
  info.innerHTML = `
    <div class="card border-0">
      <img src="${user.profile_pic}" style="width: 100%; height: auto; object-fit: cover;" class="mb-3" alt="Avatar">

      <div class="card-body p-0">
        <p class="mb-1"><strong>Name:</strong> ${user.first_name} ${user.last_name}</p>
        <p class="mb-1"><strong>Gender:</strong> ${user.gender || 'N/A'}</p>
        <p class="mb-1"><strong>Locale:</strong> ${user.locale || 'N/A'}</p>
        <p> <a href="https://facebook.com/${user.id}"><strong>Fackbook Profile</strong></a></p>
      </div>
    </div>
  `;
}

  function sendMessage() {
    const input = document.getElementById('message-input');
    const message = input.value.trim();
    if (!message || !selectedUserId) return;
    contacts[selectedUserId].messages.push({ from: 'admin', text: message });
    renderMessages(selectedUserId);
    socket.emit('admin-reply', { senderId: selectedUserId, message });
    saveToGoogleSheet(selectedUserId, contacts[selectedUserId].info, '', message);

    input.value = '';
  }
  function saveToGoogleSheet(senderId, userInfo, userMessage, adminReply) {
  fetch('/save-to-sheet', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      sheet_id: senderId,
      full_name: `${userInfo.first_name} ${userInfo.last_name}`,
      profile_url: `https://facebook.com/${senderId}`,
      gender: userInfo.gender || '',
      locale: userInfo.locale || '',
      user_message: userMessage,
      admin_reply: adminReply,
      timestamp: new Date().toISOString()
    })
  });
}

</script>


</body>
</html>
